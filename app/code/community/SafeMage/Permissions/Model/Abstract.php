<?php
/*
NOTICE OF LICENSE

This source file is subject to the SafeMageEULA that is bundled with this package in the file LICENSE.txt.

It is also available at this URL: https://www.safemage.com/LICENSE_EULA.txt

Copyright (c)  SafeMage (https://www.safemage.com/)
*/

abstract class SafeMage_Permissions_Model_Abstract extends Mage_Core_Model_Abstract
{
    protected $_entityTypeId;

    protected $_fieldsToEncode = array('store_ids', 'category_ids', 'ids', 'tabs');

    protected $_fieldsToDecode = array('store_ids', 'category_ids', 'ids', 'tabs');

    protected $_checkboxes = array('allow_create', 'allow_edit', 'allow_delete');

    protected $_attributes = array();

    protected $_attrStrField = 'af';

    abstract public function getTabsAvailable();

    public function addData(array $arr)
    {
        $this->_initBeforeAddData();
        $parent = parent::addData($arr); // TODO: Change the autogenerated stub
        return $parent;
    }

    public function getRequestHelper()
    {
        return Mage::helper('safemage_permissions/request');
    }

    public function getAttributes()
    {
        if ($this->_attributes) {
            return $this->_attributes;
        }

        $rows = $this->getResource()->getAttributes($this->getRoleId(), $this->_entityTypeId);
        foreach($rows as $row) {
            $attrId = $row['attribute_id'];
            $this->_attributes[$attrId]= $row;
        }

        return $this->_attributes;
    }

    public function attributesToOptionArray($valueField = 'attribute_id', $labelField = 'permission')
    {
        $attributes = $this->getAttributes();
        $a = array();
        foreach($attributes as $attrId => $data) {
            $id = $data[$valueField];
            $label = $data[$labelField];

            $a[$id]= $label;
        }
        return $a;
    }

    public function getAttribute($attrId)
    {
        $attributes = $this->getAttributes();
        $attr = isset($attributes[$attrId]) ? $attributes[$attrId] : null;

        return $attr;
    }

    public function isAttributeEditable($attrId)
    {
        $attr = $this->getAttribute($attrId);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_EDITABLE);
        return $res;
    }

    public function isAttributeReadonly($attrId)
    {
        $attr = $this->getAttribute($attrId);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_READONLY);
        return $res;
    }

    public function isAttributeHidden($attrId)
    {
        $attr = $this->getAttribute($attrId);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_HIDDEN);
        return $res;
    }

    public function getAttributeByCode($attrCode)
    {
        $attributes = $this->getAttributes();
        foreach($attributes as $attr) {
            if ($attr['attribute_code'] == $attrCode) {
                return $attr;
            }
        }

        return null;
    }

    public function isAttributeByCodeEditable($attrCode)
    {
        $attr = $this->getAttributeByCode($attrCode);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_EDITABLE);
        return $res;
    }

    public function isAttributeByCodeReadonly($attrCode)
    {
        $attr = $this->getAttributeByCode($attrCode);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_READONLY);
        return $res;
    }

    public function isAttributeByCodeHidden($attrCode)
    {
        $attr = $this->getAttributeByCode($attrCode);
        $res = ($attr['permission'] == SafeMage_Permissions_Model_Attribute::PERMISSION_HIDDEN);
        return $res;
    }

    public function getAttributeResource()
    {
        return Mage::getResourceModel('safemage_permissions/attribute');
    }

    public function isAttributeByCodeInHiddenGroup($attrCode)
    {
        if ($g = $this->getAttributeResource()->getGroupByCode($attrCode, (int)$this->_entityTypeId)) {
            $gName = $g['attribute_group_name'];

            if ($tabsAvailable = $this->getTabsAvailable()) {
                if (in_array($gName, $tabsAvailable)) {
                    if (!in_array($gName, $this->getTabs())) {

                        return true;
                    }
                }
            }
        }

        return false;
    }

    public function isTabAllowed($label)
    {
        $tabsAvailable = array_keys($this->getTabsAvailable());
        if (!in_array($label, $tabsAvailable)) {
            return true;
        }

        $isAllowed = in_array($label, $this->getTabs());
        return $isAllowed;
    }

    protected function _afterLoad()
    {
        foreach($this->_fieldsToDecode as $field) {
            $data = trim($this->getData($field));
            $a = (strlen($data) == 0) ? array() : explode(',', $data);
            $this->setData($field, $a);
        }

        $parent = parent::_afterLoad(); // TODO: Change the autogenerated stub
        return $parent;
    }

    protected function _initBeforeAddData()
    {
        foreach($this->_checkboxes as $cb) {
            $this->setData($cb, 0);
        }
    }

    protected function _beforeSave()
    {
        foreach($this->_fieldsToEncode as $field) {
            $data = $this->getData($field);
            $s = (count($data) == 0) ? '' : implode(',', $data);
            $this->setData($field, $s);
        }

        foreach($this->_checkboxes as $field) {
            $data = $this->getData($field);
            $s = empty($data)? 0 : 1;
            $this->setData($field, $s);
        }

        $parent = parent::_beforeSave(); // TODO: Change the autogenerated stub
        return $parent;
    }

    protected function _afterSave()
    {
        $attrStr = $this->getData($this->_attrStrField);

        if ($attrStr && $this->_entityTypeId) {
            $attrs = Mage::helper('safemage_permissions/request_radio')->decode($attrStr);
            Mage::getResourceModel('safemage_permissions/attribute')->update(
                $this->getRoleId(),
                $attrs,
                $this->_entityTypeId
            );
        }

        $parent = parent::_afterSave(); // TODO: Change the autogenerated stub
        return $parent;
    }

    public function isStoreAllowed($storeId)
    {
        if ($this->getRequestHelper()->getAllStoresSelected($this->getStoreIds())
           || in_array($storeId, $this->getStoreIds())) {

            return true;
        }

        return false;
    }
}